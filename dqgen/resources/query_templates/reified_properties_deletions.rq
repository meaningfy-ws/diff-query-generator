# basic namespaces
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX shacl: <http://www.w3.org/ns/shacl#>

# EuroVoc and SKOS-AP/SRC-AP specific namespaces
PREFIX vb: <http://art.uniroma2.it/ontologies/vocbench#>
PREFIX eurovoc: <http://eurovoc.europa.eu/>
PREFIX euvoc: <http://publications.europa.eu/ontology/euvoc#>

PREFIX label: <http://publications.europa.eu/resource/authority/label-type/>
PREFIX status: <http://publications.europa.eu/resource/authority/concept-status/>
PREFIX align: <http://knowledgeweb.semanticweb.org/heterogeneity/alignment#>

# some popular namespaces
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX skosxl: <http://www.w3.org/2008/05/skos-xl#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX prov: <http://www.w3.org/ns/prov#>

PREFIX lemon: <http://lemon-model.net/lemon#>
PREFIX lexinfo: <http://www.lexinfo.net/ontology/2.0/lexinfo#>
PREFIX lexvo: <http://lexvo.org/ontology#>
PREFIX vann: <http://purl.org/vocab/vann/>

# legacy namespaces
PREFIX oldevo: <http://eurovoc.europa.eu/schema#>
PREFIX thes: <http://purl.org/iso25964/skos-thes#>

# versioning namespaces
PREFIX dsv: <http://purl.org/iso25964/DataSet/Versioning#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sh: <http://purl.org/skos-history/>
PREFIX xhv: <http://www.w3.org/1999/xhtml/vocab#>
# Show all deleted reified structures
SELECT DISTINCT ?instance ?class ?prefLabel ?prefLabelLang ?property ?object ?objProperty ?value ?valueLang ("{{type_of_action}}" as ?actionType)
WHERE {
  GRAPH ?versionHistoryGraph {
    # parameters
    VALUES ( ?versionHistoryGraph ?oldVersion ?newVersion ?class ?property ?objProperty) {
      ( {% if versionHistoryGraph is defined and versionHistoryGraph != None %}{{ versionHistoryGraph }} {% else %}undef{% endif %}
        {% if oldVersion is defined and oldVersion != None %}{{ oldVersion }} {% else %}undef{% endif %}
        {% if newVersion is defined and newVersion != None %}{{ newVersion }} {% else %}undef{% endif %}
        {% if cls is defined and cls != None %}{{ cls }} {% else %}undef{% endif %}
        {% if prop is defined and prop != None %}{{ prop }} {% else %}undef{% endif %}
        {% if obj_prop is defined and obj_prop != None %}{{ obj_prop }}{% else %}undef{% endif %}
      )
    }
    # get the current and the previous version as default versions
    ?versionset dsv:currentVersionRecord/xhv:prev/dc:identifier ?previousVersion .
    ?versionset dsv:currentVersionRecord/dc:identifier ?latestVersion .
    # select the versions to actually use
    BIND(coalesce(?oldVersion, ?previousVersion) AS ?oldVersionSelected)
    BIND(coalesce(?newVersion, ?latestVersion) AS ?newVersionSelected)
    # get the delta and via that the relevant graphs
    ?delta a sh:SchemeDelta ;
      sh:deltaFrom/dc:identifier ?oldVersionSelected ;
      sh:deltaTo/dc:identifier ?newVersionSelected ;
      sh:deltaFrom/sh:usingNamedGraph/sd:name ?oldVersionGraph ;
      sh:deltaTo/sh:usingNamedGraph/sd:name ?newVersionGraph ;
      dct:hasPart ?insertions ;
      dct:hasPart ?deletions .
    ?deletions a sh:SchemeDeltaDeletions ;
      sh:usingNamedGraph/sd:name ?deletionsGraph .
    ?insertions a sh:SchemeDeltaInsertions ;
      sh:usingNamedGraph/sd:name ?insertionsGraph .
  }
   # get all deleted reified structures
  GRAPH ?deletionsGraph {
    ?instance ?property ?object .
    ?object ?objProperty ?value .
  }
  # ... which were not attached to some (other) instance now
  FILTER NOT EXISTS {
    GRAPH ?insertionsGraph {
      ?instance ?property ?object .
      ?object ?objProperty ?value .
    }
  }
    FILTER NOT EXISTS {
    GRAPH ?newVersionGraph {
      ?newInstance ?property ?newObject .
      ?newObject ?objProperty ?value .
    }
  }
  GRAPH ?oldVersionGraph {
    # get instances having that reified structure
    ?instance a ?class .
    ?instance ?property ?object .
    ?object ?objProperty ?value .
    {% for lang in languages %}
    {% if preview_object_property == "" and preview_property == "" %}
    # fall back to known labels if no preview property
    optional {
      ?instance rdfs:label ?rdfsLabel{{lang|title}} .
      FILTER(LANG(?rdfsLabel{{lang|title}}) = "" || LANGMATCHES(LANG(?rdfsLabel{{lang|title}}), "{{ lang }}"))
    }

    optional {
      ?instance skos:prefLabel ?skosLabel{{lang|title}} .
      FILTER(LANG(?skosLabel{{lang|title}}) = "" || LANGMATCHES(LANG(?skosLabel{{lang|title}}), "{{ lang }}"))
    }

    optional {
      ?instance shacl:name ?shaclName{{lang|title}} .
      FILTER(LANG(?shaclName{{lang|title}}) = "" || LANGMATCHES(LANG(?shaclName{{lang|title}}), "{{ lang }}"))
    }

    BIND (COALESCE(?shaclName{{lang|title}}, ?skosLabel{{lang|title}}, ?rdfsLabel{{lang|title}}) AS ?prefLabel{{lang|title}})
    {% elif preview_object_property == "" %}
    optional {
      ?instance {{ preview_property }} ?prefLabel{{lang|title}} .
      FILTER (lang(?prefLabel{{lang|title}}) = "{{ lang }}")
    }
    {% else %}
    optional {
      ?instance {{ preview_property }} ?prefLabelObj .
      ?prefLabelObj {{ preview_object_property }} ?prefLabel{{lang|title}} .
      FILTER (lang(?prefLabel{{lang|title}}) = "{{ lang }}")
    }
    {% endif %}
    {% endfor %}
    {% if languages|length > 1 %}
    {% if preview_object_property == "" and preview_property == "" %}
    # fall back to alternative labels if no preview property
     {
        SELECT ?instance (SAMPLE (?prefLabel) as ?prefLabelRandom)
        {
            ?instance shacl:name|skos:prefLabel|rdfs:label ?prefLabel .
        }
        GROUP BY ?instance order by ?prefLabel
     }
    {% elif preview_object_property == "" %}
    {
      SELECT ?instance (SAMPLE (?prefLabel) as ?prefLabelRandom)
      {
        ?instance {{ preview_property }} ?prefLabel .
      }
      GROUP BY ?instance order by ?prefLabel
    }
     {% else %}
     {
        SELECT ?instance (SAMPLE (?prefLabel) as ?prefLabelRandom)
        {
            ?instance {{ preview_property }} ?prefLabelObj .
            ?prefLabelObj {{ preview_object_property }} ?prefLabel
        }
        GROUP BY ?instance order by ?prefLabel
     }
     {% endif %}
    BIND(COALESCE({% for lang in languages -%}
                   ?prefLabel{{lang|title}}{{ ", " }}
                   {%- endfor -%}?prefLabelRandom) as ?prefLabel)
    {% else %}
    BIND (?prefLabel{{languages[0]|title}} AS ?prefLabel)
    {% endif %}
          BIND (lang(?prefLabel) AS ?prefLabelLang )
        BIND (lang(?value) AS ?valueLang )
  }
}
ORDER BY ?instance